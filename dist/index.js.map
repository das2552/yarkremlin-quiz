{"version":3,"file":"index.js","mappings":"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","sources":["webpack://webpack-template/./src/blocks/quiz/quizConstructor.js","webpack://webpack-template/./src/blocks/quiz/quizRenderView.js","webpack://webpack-template/./src/blocks/quiz/helpres.js","webpack://webpack-template/./src/blocks/quiz/quizStepRenderView.js","webpack://webpack-template/./src/blocks/quiz/quizController.js","webpack://webpack-template/./src/blocks/quiz/quizMediator.js","webpack://webpack-template/./src/blocks/quiz/quizStepController.js","webpack://webpack-template/./src/blocks/quiz/quizStepConstructor.js","webpack://webpack-template/./src/blocks/quiz/quiz.js"],"sourcesContent":["export default (element) => {\r\n  const state = {\r\n    score: 0,\r\n    activeStepIndex: 0,\r\n    stepsCount: 8,\r\n    visibilitySubmitButtonState: 'hidden',\r\n    disablingSubmitButtonState: 'disabled',\r\n    gettingResultProcessState: 'idle',\r\n  };\r\n\r\n  const elements = {\r\n    submitButton: element.querySelector('.quiz__submit'),\r\n    stepsInfo: element.querySelector('.quiz__steps-info'),\r\n    steps: Array.from(element.querySelectorAll('.quiz__step')),\r\n    resultsDataElement: element.querySelector('.quiz__results-data'),\r\n  };\r\n\r\n  return {\r\n    state,\r\n    elements,\r\n  };\r\n};\r\n","import { formatQuizStepsInfo } from './helpres';\r\n\r\nexport default {\r\n  renderSubmitButton: (props) => {\r\n    const { state, elements } = props;\r\n\r\n    if (state.visibilitySubmitButtonState === 'shown') {\r\n      elements.submitButton.classList.remove('button_hidden');\r\n    }\r\n\r\n    if (state.disablingStepNavState === 'enabled') {\r\n      elements.submitButton.disabled = false;\r\n    }\r\n\r\n    if (state.gettingResultProcessState === 'processing') {\r\n      elements.submitButton.disabled = true;\r\n    }\r\n\r\n    if (state.gettingResultProcessState === 'finished') {\r\n      elements.submitButton.disabled = false;\r\n    }\r\n\r\n    if (state.gettingResultProcessState === 'failed') {\r\n      elements.submitButton.disabled = true;\r\n    }\r\n  },\r\n\r\n  renderStepsInfo: (props) => {\r\n    const { state, elements } = props;\r\n\r\n    const stepsInfoValue = formatQuizStepsInfo(state.activeStepIndex, state.stepsCount);\r\n    elements.stepsInfo.textContent = stepsInfoValue;\r\n  },\r\n\r\n  renderSteps: (props) => {\r\n    const { state, elements } = props;\r\n\r\n    const prevStep = elements.steps[state.activeStepIndex - 1];\r\n    const currentStep = elements.steps[state.activeStepIndex];\r\n    prevStep.classList.remove('quiz__step_shown');\r\n    currentStep.classList.add('quiz__step_shown');\r\n  },\r\n\r\n  renderResultsData: (props) => {\r\n    const { state, elements } = props;\r\n\r\n    elements.resultsDataElement.value = state.score;\r\n  },\r\n};\r\n","export const formatQuizStepsInfo = (currentPointIndex, pointsCount) => {\r\n  const currentPoint = currentPointIndex + 1;\r\n  return `${currentPoint} из ${pointsCount} вопросов`;\r\n};\r\n\r\nexport const getCorrectAnswerIndex = (answers) => {\r\n  let answerIndex;\r\n\r\n  answers.forEach((answer, index) => {\r\n    if (answer.dataset.correctAnswer !== undefined) {\r\n      answerIndex = index;\r\n    }\r\n  });\r\n\r\n  return answerIndex;\r\n};\r\n","export default {\r\n  renderAnswer: (props) => {\r\n    const { state, elements } = props;\r\n    const correctAnswerElement = elements.answers[state.correctAnswerIndex];\r\n    const correctAnswerDescriptionElement = correctAnswerElement.querySelector('.quiz__answer');\r\n    const correntAnswerIconElement = correctAnswerElement.querySelector('.quiz__icon');\r\n\r\n    if (state.selectedAnswerState === 'correct') {\r\n      correctAnswerElement.classList.add('quiz__item_correct');\r\n      correctAnswerDescriptionElement.classList.remove('quiz__answer_hidden');\r\n    }\r\n\r\n    if (state.selectedAnswerState === 'incorrect') {\r\n      const selectedAnswerElement = elements.answers[state.selectedAnswerIndex];\r\n      const selectedAnswerDescriptionElement = selectedAnswerElement.querySelector('.quiz__answer');\r\n      const selectedAnswerIconElement = selectedAnswerElement.querySelector('.quiz__icon');\r\n\r\n      selectedAnswerElement.classList.add('quiz__item_incorrect');\r\n      selectedAnswerIconElement.classList.add('icon_incorrect');\r\n      selectedAnswerIconElement.classList.remove('icon_hidden');\r\n      selectedAnswerDescriptionElement.classList.remove('quiz__answer_hidden');\r\n    }\r\n\r\n    correntAnswerIconElement.classList.add('icon_correct');\r\n    correntAnswerIconElement.classList.remove('icon_hidden');\r\n\r\n    elements.fields.forEach((answerField) => {\r\n      answerField.classList.add('quiz__field_hidden');\r\n    });\r\n\r\n    elements.answers.forEach((answer) => {\r\n      answer.classList.add('quiz__item_disabled');\r\n      answer.classList.remove('quiz__item_hover');\r\n    });\r\n  },\r\n\r\n  renderStepNav: (props) => {\r\n    const { state, elements } = props;\r\n\r\n    if (state.disablingStepNavState === 'enabled') {\r\n      elements.stepNav.disabled = false;\r\n    }\r\n\r\n    if (state.visibilityStepNavState === 'hidden') {\r\n      elements.stepNav.classList.add('button_hidden');\r\n    }\r\n  },\r\n};\r\n","import quizConstructor from './quizConstructor';\r\nimport quizRenderView from './quizRenderView';\r\nimport quizStepController from './quizStepController';\r\nimport quizMediator from './quizMediator';\r\n\r\nexport default (element) => {\r\n  const quizInstace = quizConstructor(element);\r\n  const quizInstaceMediator = quizMediator(quizInstace);\r\n\r\n  const { state, elements } = quizInstace;\r\n  state.stepsCount = elements.steps.length;\r\n\r\n  quizRenderView.renderStepsInfo(quizInstace);\r\n\r\n  element.addEventListener('submit', (event) => {\r\n    event.preventDefault();\r\n  });\r\n\r\n  elements.steps.forEach((step, index) => {\r\n    quizStepController(step, index, quizInstaceMediator);\r\n  });\r\n};\r\n","import quizRenderView from './quizRenderView';\r\n\r\nexport default (quizInstace) => {\r\n  const { state } = quizInstace;\r\n\r\n  const updateScore = () => {\r\n    state.score += 1;\r\n    quizRenderView.renderResultsData(quizInstace);\r\n  };\r\n\r\n  const updateActiveStep = () => {\r\n    state.activeStepIndex += 1;\r\n    quizRenderView.renderStepsInfo(quizInstace);\r\n    quizRenderView.renderSteps(quizInstace);\r\n  };\r\n\r\n  const showSubmitButton = () => {\r\n    state.visibilitySubmitButtonState = 'shown';\r\n    quizRenderView.renderSubmitButton(quizInstace);\r\n  };\r\n\r\n  const enableSubmitButton = () => {\r\n    state.disablingStepNavState = 'enabled';\r\n    quizRenderView.renderSubmitButton(quizInstace);\r\n  };\r\n\r\n  const getLastStepIndex = () => state.stepsCount - 1;\r\n\r\n  const isLastStep = () => state.activeStepIndex === state.stepsCount - 1;\r\n\r\n  return {\r\n    updateScore,\r\n    updateActiveStep,\r\n    showSubmitButton,\r\n    enableSubmitButton,\r\n    getLastStepIndex,\r\n    isLastStep,\r\n  };\r\n};\r\n","import quizStepConstructor from './quizStepConstructor';\r\nimport quizStepRenderView from './quizStepRenderView';\r\nimport { getCorrectAnswerIndex } from './helpres';\r\n\r\nexport default (element, elementIndex, quizInstaceMediator) => {\r\n  const quizStepInstace = quizStepConstructor(element);\r\n  const { state, elements: { answers, fields, stepNav } } = quizStepInstace;\r\n\r\n  state.correctAnswerIndex = getCorrectAnswerIndex(answers);\r\n\r\n  const stepFieldChangeHandler = (index) => {\r\n    if (state.selectedAnswerIndex !== null) return;\r\n\r\n    state.selectedAnswerIndex = index;\r\n    state.disablingStepNavState = 'enabled';\r\n\r\n    if (state.selectedAnswerIndex === state.correctAnswerIndex) {\r\n      state.selectedAnswerState = 'correct';\r\n      quizInstaceMediator.updateScore();\r\n    } else {\r\n      state.selectedAnswerState = 'incorrect';\r\n    }\r\n\r\n    quizStepRenderView.renderAnswer(quizStepInstace);\r\n    quizStepRenderView.renderStepNav(quizStepInstace);\r\n\r\n    if (quizInstaceMediator.isLastStep()) quizInstaceMediator.enableSubmitButton();\r\n  };\r\n\r\n  const stepNavClickHandler = () => {\r\n    quizInstaceMediator.updateActiveStep();\r\n\r\n    if (quizInstaceMediator.isLastStep()) quizInstaceMediator.showSubmitButton();\r\n  };\r\n\r\n  stepNav.addEventListener('click', stepNavClickHandler);\r\n\r\n  fields.forEach((field, fieldIndex) => {\r\n    field.addEventListener('change', () => stepFieldChangeHandler(fieldIndex));\r\n  });\r\n\r\n  if (elementIndex === quizInstaceMediator.getLastStepIndex()) {\r\n    state.visibilityStepNavState = 'hidden';\r\n    quizStepRenderView.renderStepNav(quizStepInstace);\r\n  }\r\n};\r\n","export default (element) => {\r\n  const state = {\r\n    correctAnswerIndex: null,\r\n    selectedAnswerIndex: null,\r\n    selectedAnswerState: 'idle',\r\n    disablingStepNavState: 'disabled',\r\n    visibilityStepNavState: 'shown',\r\n  };\r\n\r\n  const elements = {\r\n    answersBox: element.querySelector('.quiz__items'),\r\n    answers: Array.from(element.querySelectorAll('.quiz__item')),\r\n    fields: Array.from(element.querySelectorAll('.quiz__field')),\r\n    stepNav: element.querySelector('.quiz__step-nav'),\r\n  };\r\n\r\n  return {\r\n    state,\r\n    elements,\r\n  };\r\n};\r\n","import quizController from './quizController';\r\n\r\nexport default () => {\r\n  const quizElements = Array.from(document.querySelectorAll('.quiz'));\r\n\r\n  quizElements.forEach((quizElement) => {\r\n    quizController(quizElement);\r\n  });\r\n};\r\n"],"names":["props","state","elements","visibilitySubmitButtonState","submitButton","classList","remove","disablingStepNavState","disabled","gettingResultProcessState","currentPointIndex","pointsCount","stepsInfoValue","activeStepIndex","stepsCount","stepsInfo","textContent","stepNav","visibilityStepNavState","add","element","quizInstace","score","disablingSubmitButtonState","querySelector","steps","Array","from","querySelectorAll","resultsDataElement","quizConstructor","quizInstaceMediator","updateScore","value","quizRenderView","updateActiveStep","prevStep","currentStep","showSubmitButton","enableSubmitButton","getLastStepIndex","isLastStep","quizMediator","length","addEventListener","event","preventDefault","forEach","step","index","elementIndex","quizStepInstace","correctAnswerIndex","selectedAnswerIndex","selectedAnswerState","answersBox","answers","fields","quizStepConstructor","answerIndex","answer","undefined","dataset","correctAnswer","getCorrectAnswerIndex","field","fieldIndex","correctAnswerElement","correctAnswerDescriptionElement","correntAnswerIconElement","selectedAnswerElement","selectedAnswerDescriptionElement","selectedAnswerIconElement","answerField","quizStepRenderView","quizStepController","document","quizElement","quizController"],"sourceRoot":""}